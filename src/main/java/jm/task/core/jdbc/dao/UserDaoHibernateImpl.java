package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;

import java.util.List;

public class UserDaoHibernateImpl implements UserDao { // Классы dao/service должны реализовывать соответствующие интерфейсы
    public UserDaoHibernateImpl() {

    }
    //NativeQuery - работа как с SQL таблицей
    //createQuery - как с классом (сущности)
      public SessionFactory sessionFactory = Util.getSessionFactory(); //прокинули сессию

    @Override// Методы создания и удаления таблицы пользователей в классе UserHibernateDaoImpl
    // должны быть реализованы с помощью SQL.
    public void createUsersTable() {
        try {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            session.createNativeQuery("CREATE TABLE IF NOT EXISTS Users(" +
                    "id BIGINT PRIMARY KEY  GENERATED BY DEFAULT AS IDENTITY," +
                    "name VARCHAR(128)," +
                    "lastName VARCHAR(128)," +
                    "age INT )").executeUpdate();

            session.getTransaction().commit();
            System.out.println("Таблица создана");
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override//// Методы создания и удаления таблицы пользователей в классе UserHibernateDaoImpl
    // должны быть реализованы с помощью SQL.
    public void dropUsersTable() {
        try  {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();
            session.createNativeQuery("DROP TABLE IF EXISTS users").executeUpdate(); //тут таблица
            session.getTransaction().commit();
            System.out.println("Таблица удалена");
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void saveUser(String name, String lastName, byte age) {
        try  {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            User user = new User(name, lastName, age);
            session.save(user);

            session.getTransaction().commit();
            System.out.println("User с именем – " + name + " добавлен в базу данных");
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void removeUserById(long id) {
        try  {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            session.delete(session.get(User.class, id));

            session.getTransaction().commit();
            System.out.println("Пользователь с ID: " + id + " удален из базы");
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<User> getAllUsers() {
        try  {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            List users = session.createQuery("FROM User").getResultList(); //тут класс

            session.getTransaction().commit();

            return users;
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public void cleanUsersTable() {
        try  {
            Session session = sessionFactory.getCurrentSession();
            session.beginTransaction();

            session.createQuery("DELETE FROM User ").executeUpdate(); //тут класс
//            for (User u : users) {
//                session.delete(u);
//            }
            session.getTransaction().commit();
        } catch (HibernateException e) {
            throw new RuntimeException(e);
        }
    }
}
